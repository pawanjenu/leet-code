class WordDictionary {
    TrieNode root;
    class TrieNode{
        boolean isWord;
        TrieNode[] children;
        public TrieNode(){
            isWord = false;
            children = new TrieNode[26];
        }
    }
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode current = root;
        for(int i=0;i<word.length();i++){
            if (current.children[word.charAt(i)-'a']  == null)
                current.children[word.charAt(i)-'a'] = new TrieNode();
            current = current.children[word.charAt(i)-'a'];
        }
        current.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
       if (word == null || word.length() == 0) return false;
        return dfs(word, root, 0);
    }
    
    public boolean dfs(String word, TrieNode root, int index) {
        int len = word.length();
        if (index == len) return root.isWord;
        if (root == null) return false;
        
        char ch = word.charAt(index);
        if (ch != '.') {
            TrieNode next = root.children[ch - 'a'];
            return next == null ? false : dfs(word, next, index + 1);
        } else {
            for (TrieNode next : root.children) {
                if (next != null && dfs(word, next, index + 1))
                    return true;
            }
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
