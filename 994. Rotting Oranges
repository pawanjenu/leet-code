class Solution {
    Queue<int[]> queue;
    boolean[][] visited;
    public int orangesRotting(int[][] grid) {
        queue = new LinkedList();
        int output = 0;
        int rotten = 0;
        int fresh = 0;
        visited = new boolean[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j] == 2){
                    rotten++;
                    queue.add(new int[]{i,j});
                    visited[i][j] = true;
                } else if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }
        if(rotten == 0 && fresh == 0) return 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                int[] arr = queue.poll();
                int x = arr[0];
                int y = arr[1];
                System.out.println(x+","+y);
                addElementToQueue(grid,x+1,y);
                addElementToQueue(grid,x-1,y);
                addElementToQueue(grid,x,y+1);
                addElementToQueue(grid,x,y-1);
                grid[x][y] = 2;
            }
            output++;
        }
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return output-1;
    }
    
    public void addElementToQueue(int[][] grid,int x,int y){
        if(x==-1 || y==-1 || x==grid.length || y == grid[0].length)
            return;
        if(visited[x][y] == false && grid[x][y] == 1){
            queue.add(new int[]{x,y});
            visited[x][y] = true;
        }
    }
}
